#include<iostream>
#include<stdlib.h>
using namespace std;

struct node
{
	int data;
	struct node* next;
};
struct node* root=NULL;
int len;

void append();
void addbeg();
void addaft();
void swap();
int length();
void display();
void reverse();
void delet();

int main()
{
	int ch;
	while(1)
	{
		cout<<"1.Append"<<endl;
		cout<<"2.Addbeg"<<endl;
		cout<<"3.Addaft"<<endl;
		cout<<"4.Swap"<<endl;
		cout<<"5.Length"<<endl;
		cout<<"6.Display"<<endl;
		cout<<"7.Delete"<<endl;
		cout<<"8.Reverse"<<endl;
		cout<<"9.Exit"<<endl;
		cout<<"Enter your choice:"<<endl;
		cin>>ch;
		switch(ch)
		{
			case 1: append();
					break;
			case 2: addbeg();
					break;
			case 3: addaft();
					break;
			case 4: swap();
					break;
			case 5:	len=length();
					cout<<"Length="<<len<<endl;
					break;		
			case 6:	display();
					break;
			case 7: delet();
					break;
			case 8: reverse();
					break;
			case 9: exit(0);
		
			default: cout<<"You have entered wrong choice:"<<endl;
			
		}
	}
  return 0;
}
void append()
{
	struct node*temp;
	temp=(struct node*)malloc(sizeof(struct node));
	cout<<"Enter data:"<<endl;
	cin>>temp->data;
	temp->next=NULL;
	if(root==NULL)
	{
		root=temp;
	}
	else
	{
		struct node*p;
		p=root;
		while(p->next!=NULL)
		{
			p=p->next;
		}
		p->next=temp;
	}
	
}
void addbeg()
{
	struct node*temp;
	temp=(struct node*)malloc(sizeof(struct node));
	cout<<"Enter data:"<<endl;
	cin>>temp->data;
	temp->next=NULL;
	if(root==NULL)
	{
		root=temp;
	}
	else
	{
		temp->next=root;
		root=temp;
	}
}
int length()
{	
	int count=0;
	struct node*temp;
	temp=root;
	while(temp!=NULL)
	{
		count++;
		temp=temp->next;
	}
	return count;
}
void addaft()
{
	struct node*temp,*p;
	int loc,len,i=1;
	cout<<"Enter location where you want to insert data."<<endl;
	cin>>loc;
	len=length();
	if(loc>len)
	{
		cout<<"You have entered wrong location"<<endl;
	}
	else
	{
		p=root;
		while(i<loc)
		{
			p=p->next;
			i++;
		}
		temp=(struct node*)malloc(sizeof(struct node));
		cout<<"Enter data:"<<endl;
		cin>>temp->data;
		temp->next=NULL;
		
		temp->next=p->next;//right connection of temp
		
		p->next=temp;//left connection of temp;
		
	}
	
}
void display()
{
	struct node*temp;
	temp=root;
	if(temp==NULL)
	{
		cout<<"No elements are present"<<endl;
	}
	else
	{
		cout<<"'Elements in list are':"<<endl;
		while(temp!=NULL)
		{
			cout<<"=>"<<temp->data;
			temp=temp->next;
		}
		cout<<""<<endl;
	}
	
}

void delet()
{
	struct node*temp,*p,*q;
	int loc,i=1;
	
	cout<<"Enter loaction where you want to delete node:"<<endl;
	cin>>loc;
	if(loc>length())
	{
		cout<<"You have entered wrong choice:"<<endl;
	}
	else if(loc==1)
	{
		temp=root;
		root=temp->next;
		temp->next=NULL;
		free(temp);
	}	
	else
	{
		p=root;
		while(i<loc-1)
		{
			p=p->next;
			i++;
		}
		q=p->next;
		p->next=q->next;
		q->next=NULL;
		free(q);
	}
}
void swap()
{
	struct node*p,*q,*r;
	int i=1,loc;
	cout<<"Enter location:"<<endl;
	cin>>loc;
	
	if(loc>length())
	{
		cout<<"You have entered wrong location:"<<endl;
	}
	else if(length()==1)
	{
		cout<<"No sufficent nodes are available to swap:"<<endl;
	}
	else
	{	p=root;
		while(i<loc-1)
		{
			p=p->next;
			i++;
		}
		q=p->next;
		r=q->next;
		
		q->next=r->next;
		r->next=q;
		p->next=r;
	}
}
void reverse()
{
	int i,j,len,k,temp;
	struct node*p,*q;
	len=length();
	i=0,j=len-1;
	p=q=root;
	while(i<j)
	{
		k=0;
		while(k<j)
		{
			q=q->next;
			k++;
		}
		temp=p->data;
		p->data=q->data;
		q->data=temp;
			
		i++;
		j--;
		p=p->next;
		q=root;
	}
	
}